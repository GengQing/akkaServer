## LOGGERS ##
#define a logger 

# Log4J 采用类似 C 语言中的 printf 函数的打印格式格式化日志信息，打印参数如下： 
# %m 输出代码中指定的消息 
# %p 输出优先级，即 DEBUG ， INFO ， WARN ， ERROR ， FATAL 
# %r 输出自应用启动到输出该 log 信息耗费的毫秒数 
# %c 输出所属的类目，通常就是所在类的全名 
# %t 输出产生该日志事件的线程名 
# %n 输出一个回车换行符， Windows 平台为 “rn” ， Unix 平台为 “n” 
# %d 输出日志时间点的日期或时间，默认格式为 ISO8601 ，也可以在其后指定格式，比如： %d{yyyy MMM dd HH:mm:ss,SSS} ，输出类似： 2002 年 10 月 18 日 22 ： 10 ： 28 ， 921 
# %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。 

# log4j.additivity 表示root 日志是否输出

# log4j.rootLogger = [ level ] , appenderName, appenderName, … 
log4j.rootLogger=DEBUG,console,error,file

log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.Threshold=DEBUG
log4j.appender.console.layout.ConversionPattern=[%d{yyyy-MM-dd HH:mm:ss}] %5p  - %m%n

#log
log4j.appender.file=org.apache.log4j.DailyRollingFileAppender
log4j.appender.file.File=serverlog/LogicServer_Log.txt
log4j.appender.file.Threshold=info
log4j.appender.file.encoding=UTF-8
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=[%-5p][%d{yyyy-MM-dd HH:mm:ss}] %m%n

#game error
log4j.appender.error=org.apache.log4j.DailyRollingFileAppender
log4j.appender.error.File=serverlog/error.txt
log4j.appender.error.Threshold=error
log4j.appender.error.encoding=UTF-8
log4j.appender.error.layout=org.apache.log4j.PatternLayout
log4j.appender.error.layout.ConversionPattern=[%-5p][%d{yyyy-MM-dd HH:mm:ss}] %l %m%n





